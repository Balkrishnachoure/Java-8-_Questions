
Important Methods : 

1. reduce() : Reducing is the repeated process of combining all elements.
   Note : T reduce(T identity, BinaryOperator<T> accumulator);
            Where, identity is initial value 
            of type T and accumulator is a 
            function for combining two values.



3.  Methods in :
   a.Predicate - test(T t) 
   b.Consumer - accept(T t)
   c.Supplier - T get()
   d.Function -  R apply(T t) , 
                 default <V> Function<V, R> andThen(Function<? super R, ? extends V> after) ,
                 default <V> Function<V, R> compose(Function<? super V, ? extends T> before) ,
                 static <T> Function<T, T> identity()

4. limit() - is a short-circuiting operation.
     Eg : Stream.iterate(0, i -> i + 1)
           .filter(i -> i % 2 == 0)
            .limit(10)
              .forEach(System.out::println);
5. boxed() : Stream<Integer> boxed()
            It is an Intermidiate Operation .It is Lazy  .
            It wraps primitive types to into an object .

6. OptionalInt : It is a container Object/class which may or may not contains a int value .
                 Be carefull while using (== and  .equals()) in case of OptionalInt instance .
                 Eg: OptionalInt opInt = OptionalInt.of(45); 
                    System.out.println("OptionalInt: "+ opInt.toString());  //[45]
                    System.out.println("Value in OptionalInt = " + opInt.getAsInt());  // 45
                Eg2 :    try { 
                              OptionalInt opInt = OptionalInt.empty(); 
                              System.out.println("OptionalInt:+ opInt.toString()); // OptionalInt.empty 
                              System.out.println("Value in OptionalInt = "+ opInt.getAsInt()); // java.util.NoSuchElementException
                              } catch (Exception e) {  System.out.println("Exception: " + e);  } 

7. ifPresentOrElse(Consumer,Runnable) : 
    1.It is the method of java.util.optional class.
    2.It can be used only on the values of Optional Object . If the value is not present in Optional then the method performs the given 
    empty based Runnable Empty Action .
    3.public void ifPresentOrElse(Consumer<T> action, Runnable emptyAction) .
    Eg 1:  
        Optional<Integer> op = Optional.of(9455); 
        System.out.println("Optional: " + op); 
        op.ifPresentOrElse( (value) -> { System.out.println( "Value is present, its: "+ value); }, // output :  9455
            () -> { System.out.println("Value is empty"); }); 
   Eg 2:   
        Optional<Integer> op = Optional.empty(); 
        System.out.println("Optional: " + op);
        try {   op.ifPresentOrElse(  (value) -> { System.out.println( "Value is present, its: "+ value); }, 
                ()  -> { System.out.println("Value is empty"); });   //  output : Value is empty
        }  catch (Exception e) { System.out.println(e); } 


8 . Intstream.iterate()  : Introduce in java 8 and Changes made in Java 9 .
     1. static IntStream iterate(int seed, IntUnaryOperator f) - In Java 8 this was introduce .
       Where : seed - the initial element
               f - a function to be applied to the previous element to produce a new element
      2. static IntStream	iterateâ€‹(int seed, IntPredicate hasNext, IntUnaryOperator next) -  In Java 9 .
         Where seed - the initial element
               hasNext - a predicate to apply to elements to determine when the stream must terminate.
               next - a function to be applied to the previous element to produce a new element
        Eg :  Stream.iterate(0, i -> i <= 100, i -> 3 + i).forEach(i -> System.out.printf("%d,", i));
