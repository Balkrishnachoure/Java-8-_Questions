import java.util.*;
import java.util.stream.*;

public class Demo {
    public static void main(String[] args) {
     
        Map<String, Integer> map = new HashMap<>();
        map.put("Apple", 50);
        map.put("Banana", 20);
        map.put("Orange", 30);
        map.put("Grapes", 40);
--------------
        // Solution 1 :  Sorting the map by values in ascending order
        Map<String, Integer> sortedMap = map.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, LinkedHashMap::new));
        // Solution 1 : Descending Order  Based on Key : 
      Map<String, Integer> sortedMap = map.entrySet()
        .stream()
        .sorted(Map.Entry.<String, Integer>comparingByKey(Comparator.reverseOrder()))
        .collect(Collectors.toMap(
                Map.Entry::getKey,
                Map.Entry::getValue,
                (e1, e2) -> e1, // Merge function to handle duplicates, not necessary here
                LinkedHashMap::new // Collecting to LinkedHashMap to maintain order
        ));

     Solution 2 : In Ascending Order : 
       Map<String, Integer> sortedMap = map.entrySet()
                .stream()
                .sorted((entry1, entry2) -> entry1.getValue().compareTo(entry2.getValue()))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,LinkedHashMap::new));
-------------
    # If We want to Use Default Map  and not LinkedHashMap : 
               Map<String, Integer> sortedMap = map.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

  
        // Displaying the sorted map
        sortedMap.forEach((key, value) -> System.out.println(key + " : " + value));
    }
}
