
Class Demo 
{
    public static void main(String[] args )
    {


 //Section 1 : Sorting in List : 
        List<Integer> L = Arrays.asList( 5 ,7,1,3,10,11) ;
       
       //Solution 1 :
          Collections.sort( L, (i1 , i2) -> (i1>i2) ? -1 : (i1 <i2) ? 1 : 0) ;
          System.out.print( L.toString()) ;

       //Solution 2 : Using CompareTO()
         L.sort((i1, i2) -> i2.compareTo(i1));
         System.out.print( L.toString()) ;
        
     //Solution 3 : Using Comparator.reverseOrder() and Comparator.naturalOrder()  :
           L.sort(Comparator.reverseOrder()) ;
           L.sort(Comparator.naturalOrder());
           System.out.print( L.toString()) ;

// Note : Collections.sort()  only work for List in Colletions Framework : 


// Section 2 : Sorting in  and  TreeSet  : 
          //Solution 1 :
            // TreeSet<Integer> m = new TreeSet<>( (i1, i2) -> (i1>i2) ? -1 : (i1 < i2)? 1:0) ;
         // Solution 2 :
           // TreeSet<Integer> m = new TreeSet<>( (i1, i2) -> i2.compareTo(i1)) ;
         // Solution 3 :
           TreeSet<Integer> m = new TreeSet<>(Comparator.reverseOrder()) ;
               m.add(2) ;
               m.add(4) ;
               m.add(1) ;
               m.add(9) ;
               System.out.print(m.toString()) ;



// Sections 3 : Sorting in TreeMap :
          //Solution 1 :
            //TreeMap<Integer,String> m = new TreeMap<>( (i1, i2) -> (i1>i2) ? -1 : (i1 < i2)? 1:0) ;
         // Solution 2 :
           // TreeMap<Integer, String > m = new TreeMap<>( (i1, i2) -> i2.compareTo(i1)) ;
        // Solution 3 :
             TreeMap<Integer, String > m = new TreeMap<>(Comparator.reverseOrder()) ;
             TreeMap<Integer, String > m = new TreeMap<>(Comparator.naturalOrder()) ;
             m.put(2 ,"Bala") ;
             m.put(4 , "Aadil ") ;
             m.put(1 , "Abhay") ;
             m.put(9 , "Naseer") ;
            System.out.print(m.toString()) ;


    

    }

}
